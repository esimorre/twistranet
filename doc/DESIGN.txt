Design considerations for TwistraNet
+++++++++++++++++++++++++++++++++++++

Resources
==========

Resources are links to digital assets that TwistraNet doesn't really manage directly.
A resource can be:
- A regular file ;
- An image, video, office file, each one offering additional services

Ressources are not stored in TN's database nor accessible directly through the web: it is secured either by a content or an account.
A ressource is usually bound to a content, and is available in the same exact conditions as the content it's bound to.
But resources can also be bound to several contents, avoiding file duplication. If you have an image you want to use in several contents, you can use only one resource (and store only one file).
Finally, a resource can be unbound, ie. not associated to a content. In this case, security is driven by the account's scope.

An editable resource is deleted when the last content bound to it is deleted (unless explicitly told against it).

Resources are shared across accounts (ie. a resource created by one account can be freely used by another), but a resource has a proprietary account who is the only one to be able to edit it.

(v2) Resources can be translated (both metadata AND resource pointer). In case of a translated resource, the translator is the proprietary of the translation, but if the original resource is modified/deleted, all translated resources get modified/deleted too.

Resources are handled via a resource manager which tells TN where to find the resource content.
The resource managers provides ways for TN to fetch the resource, and (for some of them) to create new ones, to search them, etc.
The resource managers bundled with TN are:
- FilesystemResourceManager: This if for files stored on the filesystem. TN provides a basic file management system to allow upload, storage and deletion of files.
- ReadonlyFilesystemResourceManager: Same as FilesystemResourceManager, but read-only. This is useful for default resources provided by TN or to enable directory access without hassles.
- LinkResourceManager: Resources are designated by a URL. This URL is proxied by the server when served.


Database consistancy
====================

The model is not a rdbm-normal one, THIS IS ON PURPOSE:
1/ for read performance reasons
2/ to allow the model to be quite easily migrated to a nosql backend someday

The framework normally takes care of keeping it straight. But it may be broken in some way (fixture not correct, updates or bugs, crashes, ...)
Here are some clues to ensure that the schema is ok:

1/ Content types

Content are typed, but the 'content' table holds generic information. Check every content type object and check that content.content_type field is set to the right type.

2/ Relations

Symetrical (ie. approved) relations are two entries in the relations table. Check that for approved relations both are present (and approved!)


TODO: DEV
==========

Scope must be an integer, ordered by privacy.

TODO: DESIGN
=============

There are some issues to solve.

- Translation (including translatable content vs. translatable fields (for accounts by example))
- Fully-accessible vs. Listed (ie. only title/image/description visible) content or accounts: how to manage that?
- Search in faceted and secured ways
- Resources
- Taxonomy: use a 'Folder' content type?

